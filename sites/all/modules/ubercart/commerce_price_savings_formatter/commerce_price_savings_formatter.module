<?php
// $Id$

/**
 * @file
 * Adds a display formatter for the price field showing the amount of savings.
 */

/**
 * Implements hook_field_formatter_info().
 */
function commerce_price_savings_formatter_field_formatter_info() {
  return array(
    'commerce_price_savings_formatter_formatter' => array(
      'label' => t('Formatted amount with savings'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => 'calculated_sell_price',
        'prices' => array('list', 'price', 'savings'),
        'savings' => 'both',
        'show_labels' => TRUE,
      ),
    ),
    'commerce_price_savings_formatter_inline' => array(
      'label' => t('Formatted amount with savings (inline)'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => 'calculated_sell_price',
        'prices' => array('list', 'price'),
        'savings' => 'percentage',
        'show_labels' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_price_savings_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'] + field_info_formatter_settings($display['type']);

  // Add the default calculation type selection option.
  $form = commerce_price_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  // Add the price display settings form.
  $form['prices'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Prices to display'),
    '#options' => array(
      'list' => t('List price'),
      'price' => t('Price'),
      'savings' => t('You save'),
    ),
    '#default_value' => $settings['prices'],
  );

  $form['savings'] = array(
    '#type' => 'radios',
    '#title' => t('Savings display method'),
    '#options' => array(
      'amount' => t('The amount saved'),
      'percentage' => t('The percentage saved'),
      'both' => t('Both the amount and percentage saved'),
    ),
    '#default_value' => $settings['savings'],
  );

  $form['show_labels'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Price Labels'),
    '#default_value' => $settings['show_labels'],
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_price_savings_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'] + field_info_formatter_settings($display['type']);

  $summary = array();

  // Add the default calculation text to the summary.
  $summary[] = commerce_price_field_formatter_settings_summary($field, $instance, $view_mode);

  // Add rows for specific settings.
  $prices = array(
    'list' => t('List price'),
    'price' => t('Price'),
    'savings' => t('You save'),
  );

  $prices_shown = implode(', ', array_intersect_key($prices, drupal_map_assoc(array_values($settings['prices']))));
  if (!empty($prices_shown)) {
    $summary[] = t('Showing: !prices', array('!prices' => $prices_shown));
  }
  else {
    $summary[] = t('Not showing any prices.');
  }

  if (!empty($settings['show_labels'])) {
    $summary[] = t('Labels shown');
  }
  else {
    $summary[] = t('No labels');
  }


  switch ($settings['savings']) {
    case 'amount':
      $summary[] = t('Savings displayed as the amount.');
      break;

    case 'percentage':
      $summary[] = t('Savings displayed as the percentage.');
      break;

    case 'both':
      $summary[] = t('Savings displayed as the amount and percentage.');
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function commerce_price_savings_formatter_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  commerce_price_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_price_savings_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'] + field_info_formatter_settings($display['type']);

  $tax_module_exists = module_exists('commerce_tax');

  // Theme the display of the price based on the display type.
  if (in_array($display['type'], array('commerce_price_savings_formatter_formatter', 'commerce_price_savings_formatter_inline'))) {
    // exit if no display prices
    if (empty($settings['prices'])) {
      return $element;
    }

    // remove prices not selected
    $settings['prices'] = array_filter($settings['prices']);

    // exit if no prices selected
    if (empty($settings['prices'])) {
      return $element;
    }

    // store prices count
    $prices_count = count($settings['prices']);

    // determine if labels are shown
    $show_labels = !empty($settings['show_labels']);

    // determine theme
    $item_theme = $display['type'];

    // Loop through each price value in this field.
    foreach ($items as $delta => $item) {
      // Build an array of prices to send to the theme function.
      $prices = array();
      $difference = 0;
      $base_price_component = commerce_price_component_total($item, 'base_price');

      if ($base_price_component) {
        // calculate included tax amount on base amount
        $included_tax_amount = 0;
        foreach ($item['data']['components'] as $component) {
          if (!empty($component['included']) && !empty($component['price']['data']['tax_rate'])) {
            $included_tax_amount += $component['price']['amount'];
          }
        }
        $base_price_component['amount'] += $included_tax_amount;

        // Calculate the difference between the base price and calculated price.
        $difference = $base_price_component['amount'] - commerce_currency_convert($item['amount'], $item['currency_code'], $base_price_component['currency_code']);
      }

      // format prices
      foreach ($settings['prices'] as $price_type) {
        $price_value = NULL;
        switch ($price_type) {
          case 'list':
            // Only show the list price if the current price is lower.
            if ($difference > 0 || $prices_count == 1) {
              $price_value = commerce_currency_format($base_price_component['amount'], $base_price_component['currency_code'], $entity);
            }
            break;

          case 'price':
            $price_value = commerce_currency_format($item['amount'], $item['currency_code'], $entity);
            break;

          case 'savings':
            // Only show the savings if the current price is lower than the list
            // price; i.e. if there actually are savings.
            if ($difference > 0) {
              $amount = commerce_currency_format($difference, $item['currency_code'], $entity);
              $percentage = round(($difference / $base_price_component['amount']) * 100) . '%';

              switch ($settings['savings']) {
                case 'amount':
                  $price_value = $amount;
                  break;

                case 'percentage':
                  $price_value = $percentage;
                  break;

                case 'both':
                default:
                  $price_value = $amount . ' (' . $percentage . ')';
                  break;
              }
            }
            break;
        }

        // build prices array with rendered price
        if (isset($price_value)) {
          $prices[$price_type] = array('#markup' => $price_value);

          // add label
          if ($show_labels) {
            $label = _commerce_price_savings_formatter_label_info($price_type);
            $prices[$price_type]['#price_label'] = !empty($label) ? $label : '';
          }
        }
      }

      $element[$delta] = array(
        '#theme' => $item_theme,
        '#prices' => $prices,
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'commerce_price_savings_formatter') . '/theme/commerce_price_savings_formatter.css'),
        ),
      );
    } // /item loop

  } // /type switch

  return $element;
}

/**
 * Returns an array of labels for each formatter price
 */
function _commerce_price_savings_formatter_label_info($type = NULL) {
  $labels = &drupal_static(__FUNCTION__);
  if (!isset($labels)) {
    $labels = array(
      'list' =>  t('List price'),
      'price' => t('Price'),
      'savings' => t('You save'),
    );
  }

  if (isset($type)) {
    return isset($labels[$type]) ? $labels[$type] : NULL;
  }

  return $labels;
}

/**
 * Implements hook_theme().
 */
function commerce_price_savings_formatter_theme() {
  return array(
    'commerce_price_savings_formatter_formatter' => array(
      'variables' => array('prices' => array()),
    ),
    'commerce_price_savings_formatter_inline' => array(
      'variables' => array('prices' => array()),
    ),
  );
}

/**
 * Theme callback: display prices in a table.
 */
function theme_commerce_price_savings_formatter_formatter($vars) {
  // Build an array of table rows based on the prices passed in.
  $rows = array();

  // exit if no prices
  if (empty($vars['prices'])) {
    return '';
  }

  // store prices count
  $prices_count = count($vars['prices']);

  // build rows
  foreach ($vars['prices'] as $key => $price_element) {
    $row_data = array();

    // add label
    if (isset($price_element['#price_label'])) {
      if (!empty($price_element['#price_label'])) {
        $label = t('@label:', array('@label' => $price_element['#price_label']));
      }
      else {
        $label = '';
      }

      $row_data[] = array('data' => $label, 'class' => array('price-label'));
    }

    // add price
    $row_data[] = array('data' => drupal_render($price_element), 'class' => array('price-amount'));


    $rows[] = array(
      'data' => $row_data,
      'class' => array('commerce-price-savings-formatter-' . $key),
    );
  }

  return theme('table', array('rows' => $rows, 'attributes' => array('class' => array('commerce-price-savings-formatter-prices', 'commerce-price-savings-formatter-prices-count-' . $prices_count))));
}

/**
 * Theme callback: display prices as a list.
 */
function theme_commerce_price_savings_formatter_inline($vars) {
  // Build an array of table rows based on the prices passed in.
  $rows = array();

  // exit if no prices
  if (empty($vars['prices'])) {
    return '';
  }

  // store prices count
  $prices_count = count($vars['prices']);

  // build rows individually
  $price_row = array();
  $label_row = array();
  foreach ($vars['prices'] as $key => $price_element) {
    $row_data = array();

    // add label
    if (isset($price_element['#price_label'])) {
      if (!empty($price_element['#price_label'])) {
        $label = t('@label', array('@label' => $price_element['#price_label']));
      }
      else {
        $label = '';
      }

      $label_row[$key] = array('data' => '<span class="price-label">' . $label . '</span>', 'class' => array('commerce-price-savings-formatter-' . $key));
    }

    // add price
    $price_row[$key] = array('data' => '<span class="price-amount">' . drupal_render($price_element) . '</span>', 'class' => array('commerce-price-savings-formatter-' . $key));
  }

  // fill out label row
  if (!empty($label_row) && count($label_row) != count($price_row)) {
    foreach ($price_row as $key => $price_cell) {
      if (!isset($label_row[$key])) {
        $label_row[$key] = '';
      }
    }
  }

  // combine rows
  $rows = array(
    array('data' => $price_row, 'class' => array('commerce-price-savings-formatter-price-row')),
    array('data' => $label_row, 'class' => array('commerce-price-savings-formatter-label-row')),
  );

  return theme('table', array('rows' => $rows, 'attributes' => array('class' => array('inline', 'commerce-price-savings-formatter-prices', 'commerce-price-savings-formatter-prices-inline', 'commerce-price-savings-formatter-prices-count-' . $prices_count))));
}
